import streamlit as st
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import pandas as pd


def fetch_yahoo_finance_news():
    """Fetch top 5 news headlines from Yahoo Finance."""
    url = "https://uk.finance.yahoo.com/topic/news/"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    headlines = [item.get_text() for item in soup.find_all('h3', class_='Mb(5px)') if item and item.get_text()]
    return headlines[:5]


def fetch_bond_data(country_code):
    """Fetch bond data from Financial Times based on country code."""
    url = f"https://markets.ft.com/data/bonds?country={country_code}"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    table = soup.find('table', class_='mod-ui-table mod-yields-app_mod mod-module--trans')
    rows = table.find_all('tr')
    data = [{'Tenor': row.find_all('td')[0].text.strip(),
             'Yield': float(row.find_all('td')[1].text.replace('%', '').strip())} for row in rows[1:]]

    return data


def plot_yield_curve(data, country):
    """Plot and display the yield curve for the selected country."""
    tenors, rates = [row['Tenor'] for row in data], [row['Yield'] for row in data]
    plt.figure(figsize=(10, 6))
    plt.plot(tenors, rates, marker='o')
    plt.title(f'{country} Yield Curve')
    plt.xlabel('Tenor')
    plt.ylabel('Yield (%)')
    plt.grid(True)
    st.pyplot()


# Displaying Top 10 Market News Headlines
st.subheader("Top 10 Market News Headlines")
headlines = fetch_yahoo_finance_news()
if headlines:
    col1, col2 = st.columns(2)
    for i in range(0, len(headlines), 2):
        with col1:
            st.write(f"{i+1}. {headlines[i]}")
        if i + 1 < len(headlines):
            with col2:
                st.write(f"{i+2}. {headlines[i+1]}")

# Dropdown for selecting country for yield curve
country_codes = {'United States': 'US', 'United Kingdom': 'GB', 'Japan': 'JP', 'Eurozone': 'EZ'}
selected_country = st.selectbox('Select a country for yield curve:', list(country_codes.keys()))

# Fetch and plot yield curve
bond_data = fetch_bond_data(country_codes[selected_country])
plot_yield_curve(bond_data, selected_country) if bond_data else st.write(f"Failed to fetch data for {selected_country}.")


# Economic Calendar
st.subheader("Economic Calendar")
iframe_code = '''
<iframe src="https://sslecal2.investing.com?columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous&features=datepicker,timezone&countries=25,32,6,37,72,22,17,39,14,10,35,43,56,36,110,11,26,12,4,5&calType=day&timeZone=15&lang=1" width="650" height="467" frameborder="0" allowtransparency="true" marginwidth="0" marginheight="0"></iframe>
'''
st.components.v1.html(iframe_code, height=500)
