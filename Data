import streamlit as st
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import pandas as pd  

# Function to fetch news from Yahoo Finance
def fetch_yahoo_finance_news():
    url = "https://uk.finance.yahoo.com/topic/news/"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    headlines = []
    for item in soup.find_all('h3', {'class': lambda x: x and 'Mb(5px)' in x}):
        if item:
            text = item.get_text()
            if text:
                headlines.append(text)
    return headlines[:5]

def fetch_key_equities():
    indices = ['^FTSE', '^GSPC', '^DJI', '^N225']
    names = ['FTSE 100', 'S&P 500', 'Dow Jones', 'Nikkei 225']
    data = []

    for index, name in zip(indices, names):
        url = f"https://finance.yahoo.com/quote/{index}"
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')

        value = soup.find('span', {'data-reactid': '50'}).get_text()
        data.append({
            'Index': name,
            'Value': value
        })

    return data

# Key Equities Overview
st.subheader("Key Equities Overview")
equities = fetch_key_equities()
if equities:
    st.table(equities)
else:
    st.write("No data available for key equities.")


# Market News Headlines
st.subheader("Top 10 Market News Headlines")
headlines = fetch_yahoo_finance_news()
if headlines:
    col1, col2 = st.columns(2)
    for i in range(0, len(headlines), 2):
        with col1:
            st.write(f"{i+1}. {headlines[i]}")
        if i + 1 < len(headlines):
            with col2:
                st.write(f"{i+2}. {headlines[i+1]}")



def fetch_bond_data(country_code):
    url = f"https://markets.ft.com/data/bonds?country={country_code}"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    table = soup.find('table', {'class': 'mod-ui-table mod-ui-table--colored'})
    rows = table.find_all('tr')
    data = []

    for row in rows[1:]:  # Skip the header row
        cols = row.find_all('td')
        tenor = cols[0].text.strip()
        yield_value = float(cols[1].text.replace('%', '').strip())
        data.append({'Tenor': tenor, 'Yield': yield_value})

    return data

def plot_yield_curve(data, country):
    tenors = [row['Tenor'] for row in data]
    rates = [row['Yield'] for row in data]

    plt.figure(figsize=(10, 6))
    plt.plot(tenors, rates, marker='o')
    plt.title(f'{country} Yield Curve')
    plt.xlabel('Tenor')
    plt.ylabel('Yield (%)')
    plt.grid(True)
    st.pyplot()



# Dropdown for selecting the country for yield curve
country_codes = {
    'United States': 'US',
    'United Kingdom': 'GB',
    'Japan': 'JP',
    'Eurozone': 'EZ'
}

options = list(country_codes.keys())
selected_country = st.selectbox('Select a country for yield curve:', options)

# Fetch and plot yield curve
bond_data = fetch_bond_data(country_codes[selected_country])
if bond_data:
    plot_yield_curve(bond_data, selected_country)
else:
    st.write(f"Could not fetch data for {selected_country}.")


# Economic Calendar
st.subheader("Economic Calendar")
iframe_code = '''
<iframe src="https://sslecal2.investing.com?columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous&features=datepicker,timezone&countries=25,32,6,37,72,22,17,39,14,10,35,43,56,36,110,11,26,12,4,5&calType=day&timeZone=15&lang=1" width="650" height="467" frameborder="0" allowtransparency="true" marginwidth="0" marginheight="0"></iframe>
'''
st.components.v1.html(iframe_code, height=500)
