import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import plotly.express as px

# Function to scrape news from Yahoo Finance and perform sentiment analysis
def fetch_yahoo_finance_news():
    url = "https://uk.finance.yahoo.com/topic/news"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    headlines = {}
    
    for item in soup.find_all('h3', {'class': 'Mb(5px)'}):
        text = item.get_text()
        link = item.a['href']
        blob = TextBlob(text)
        sentiment = blob.sentiment.polarity
        if text:
            headlines[text] = {
                'link': f"https://finance.yahoo.com{link}",
                'sentiment': sentiment
            }
    return headlines

# Web App Title
st.title("Dynamic Market Overview")

# Market News Headlines
st.subheader("Market News Headlines")
headlines = fetch_yahoo_finance_news()
headline_list = list(headlines.keys())

# Dynamic News Summary
selected_headline = st.selectbox('Select a headline for summary', headline_list)
if selected_headline:
    st.write(f"Summary for: {selected_headline}")
    summary_url = headlines[selected_headline]['link']
    st.write(f"For more details, [click here]({summary_url})")


uk_yield_data = pd.read_csv(r"\\mfil.local\proddfs\appsense\profiles\users\N354792\Desktop\GLC Real DATA.csv")
us_yield_data = pd.read_csv(r"\\mfil.local\proddfs\appsense\profiles\users\N354792\Desktop\US YIELD DATA.csv")

# Interactive Yield Curve Plots
st.subheader("Yield Curve")
yield_curve_choice = st.selectbox('Select Yield Curve', ['UK', 'US'])

if yield_curve_choice == 'UK':
    fig_uk = px.line(uk_yield_data, x='Maturity', y='Rates', title='UK Yield Curve')
    st.plotly_chart(fig_uk)
elif yield_curve_choice == 'US':
    fig_us = px.line(us_yield_data, x='Maturity', y='Rates', title='US Yield Curve')
    st.plotly_chart(fig_us)



# Read UK yield data from CSV file
uk_yield_data = pd.read_csv(r"\\mfil.local\proddfs\appsense\profiles\users\N354792\Desktop\GLC Real DATA.csv")
us_yield_data = pd.read_csv(r"\\mfil.local\proddfs\appsense\profiles\users\N354792\Desktop\US YIELD DATA.csv")

# Web App Title
st.title("Dynamic Market Overview")

# Market News Headlines
st.subheader("Top Yahoo Finance UK Market News Headlines")
headlines = fetch_yahoo_finance_news()
for headline in headlines:
    st.write(f"- {headline}")


# Inflation Rates
show_inflation = st.selectbox('Show Inflation Rates', ['UK', 'US', 'JP'])
if show_inflation == 'US':
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("United States")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"US Inflation Rate: {inflation_data['yearly_rate_pct']}%")
    else:
        st.write("Error fetching inflation data.")
elif show_inflation == 'UK':  # Fixed the comparison operator here
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("United Kingdom")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"UK Inflation Rate: {inflation_data['yearly_rate_pct']}%")  # Fixed the message here
    else:
        st.write("Error fetching inflation data.")
elif show_inflation == 'JP':  # Fixed the comparison operator here
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("Japan")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"UK Inflation Rate: {inflation_data['yearly_rate_pct']}%")  # Fixed the message here
    else:
        st.write("Error fetching inflation data.")



st.subheader("Economic Calendar")
iframe_code = '''
<iframe src="https://sslecal2.investing.com?columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous&features=datepicker,timezone&countries=25,32,6,37,72,22,17,39,14,10,35,43,56,36,110,11,26,12,4,5&calType=day&timeZone=15&lang=1" width="650" height="467" frameborder="0" allowtransparency="true" marginwidth="0" marginheight="0"></iframe>
'''
st.components.v1.html(iframe_code, height=500)
