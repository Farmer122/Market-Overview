import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob

# Function to scrape news from Yahoo Finance and perform sentiment analysis
def fetch_yahoo_finance_news():
    url = "https://uk.finance.yahoo.com/topic/news"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    headlines = {}
    
    for item in soup.find_all('h3', {'class': lambda x: x and 'Mb(5px)' in x}):
        text = item.get_text()
        link = item.a['href']
        blob = TextBlob(text)
        sentiment = blob.sentiment.polarity
        
        if text and link:
            headlines[text] = {
                'link': f"https://finance.yahoo.com{link}",
                'sentiment': sentiment
            }
    return headlines

# Web App Title
st.title("Dynamic Market Overview")

# Market News Headlines
st.subheader("Market News Headlines")

headlines = fetch_yahoo_finance_news()
headline_list = list(headlines.keys())

# Create a 2x5 table for headlines with sentiment color
col1, col2 = st.beta_columns(2)
with col1:
    for headline in headline_list[:5]:
        sentiment = headlines[headline]['sentiment']
        st.markdown(f"<p style='background-color:{'lightgreen' if sentiment > 0.2 else 'lightcoral' if sentiment < 0 else 'white'};'>{headline}</p>", unsafe_allow_html=True)
with col2:
    for headline in headline_list[5:10]:
        sentiment = headlines[headline]['sentiment']
        st.markdown(f"<p style='background-color:{'lightgreen' if sentiment > 0.2 else 'lightcoral' if sentiment < 0 else 'white'};'>{headline}</p>", unsafe_allow_html=True)

# Sentiment legend
st.subheader("Sentiment Analysis Legend")
st.markdown("<p style='background-color:lightgreen;'>Positive Sentiment</p>", unsafe_allow_html=True)
st.markdown("<p style='background-color:lightcoral;'>Negative Sentiment</p>", unsafe_allow_html=True)
st.markdown("<p style='background-color:white;'>Neutral Sentiment</p>", unsafe_allow_html=True)

# Dynamic News Summary
selected_headline = st.selectbox('Select a headline for summary', headline_list)
if selected_headline:
    st.write(f"Summary for: {selected_headline}")
    summary_url = headlines[selected_headline]['link']
    st.write(f"For more details, [click here]({summary_url})")


