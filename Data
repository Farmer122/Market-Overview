import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import requests
from bs4 import BeautifulSoup
import nltk
nltk.download('vader_lexicon')

from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Function to scrape news from Yahoo Finance and perform sentiment analysis
def fetch_yahoo_finance_news():
    url = "https://finance.yahoo.com/"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    headlines = {}
    sid = SentimentIntensityAnalyzer()
    
    for item in soup.find_all('h3', {'class': lambda x: x and 'Mb(5px)' in x}):
        text = item.get_text()
        link = item.a['href']
        sentiment = sid.polarity_scores(text)['compound']
        
        if text and link:
            headlines[text] = {
                'link': f"https://finance.yahoo.com{link}",
                'sentiment': sentiment
            }
    return headlines

# Web App Title
st.title("Dynamic Market Overview")

# Market News Headlines
st.subheader("Market News Headlines")

headlines = fetch_yahoo_finance_news()
headline_list = list(headlines.keys())

# Display headlines with sentiment color
for headline in headline_list:
    sentiment = headlines[headline]['sentiment']
    if sentiment > 0.2:
        st.markdown(f"<p style='background-color:lightgreen;'>{headline}</p>", unsafe_allow_html=True)
    elif sentiment < 0:
        st.markdown(f"<p style='background-color:lightcoral;'>{headline}</p>", unsafe_allow_html=True)
    else:
        st.markdown(f"<p style='background-color:white;'>{headline}</p>", unsafe_allow_html=True)

# Sentiment legend
st.subheader("Sentiment Analysis Legend")
st.markdown("<p style='background-color:lightgreen;'>Positive Sentiment</p>", unsafe_allow_html=True)
st.markdown("<p style='background-color:lightcoral;'>Negative Sentiment</p>", unsafe_allow_html=True)
st.markdown("<p style='background-color:white;'>Neutral Sentiment</p>", unsafe_allow_html=True)

# Dynamic News Summary
selected_headline = st.selectbox('Select a headline for summary', headline_list)
if selected_headline:
    st.write(f"Summary for: {selected_headline}")
    summary_url = headlines[selected_headline]['link']
    st.write(f"For more details, [click here]({summary_url})")

# ... (the rest of your code remains the same)


# Fetch latest yield curve data from U.S. Department of the Treasury
url = "https://home.treasury.gov/resource-center/data-chart-center/interest-rates/TextView?type=daily_treasury_yield_curve&field_tdr_date_value_month=202310"
us_yield_data = pd.read_html(url)[1]
us_yield_data = us_yield_data.dropna().reset_index(drop=True)
us_yield_data.columns = ["Date", "1 Mo", "2 Mo", "3 Mo", "6 Mo", "1 Yr", "2 Yr", "3 Yr", "5 Yr", "7 Yr", "10 Yr", "20 Yr", "30 Yr"]
us_yield_data["Date"] = pd.to_datetime(us_yield_data["Date"])
us_yield_data.set_index("Date", inplace=True)
for col in us_yield_data.columns:
    us_yield_data[col] = pd.to_numeric(us_yield_data[col], errors='coerce')

# Fetch UK yield data from uploaded CSV
uk_yield_data = pd.read_csv('/mnt/data/GLG Data.csv', index_col=0)

# Web App Title
st.title("Dynamic Market Overview")

# Market News Headlines
st.subheader("Market News Headlines")
headlines = fetch_yahoo_finance_news()
for headline in headlines:
    st.write(f"- {headline}")

# Yield Curve Dropdown
yield_curve_choice = st.selectbox('Select Yield Curve', ['UK', 'US'])

if yield_curve_choice == 'US':
    # US Yield Curve
    selected_date_us = st.selectbox('Select Date for US Yield Curve', us_yield_data.index)
    selected_date_us_yield = us_yield_data.loc[selected_date_us]
    plt.plot(selected_date_us_yield.index, selected_date_us_yield.values)
    plt.title('US Yield Curve')
    plt.xlabel('Maturity')
    plt.ylabel('Yield (%)')
    st.pyplot()
elif yield_curve_choice == 'UK':
    # UK Yield Curve
    selected_date_uk = st.selectbox('Select Date for UK Yield Curve', uk_yield_data.index)
    plt.plot(uk_yield_data.columns, uk_yield_data.loc[selected_date_uk])
    plt.title('UK Yield Curve')
    plt.xlabel('Maturity (Years)')
    plt.ylabel('Yield (%)')
    st.pyplot()


st.subheader("Economic Calendar")
iframe_code = '''
<iframe src="https://sslecal2.investing.com?columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous&features=datepicker,timezone&countries=25,32,6,37,72,22,17,39,14,10,35,43,56,36,110,11,26,12,4,5&calType=day&timeZone=15&lang=1" width="650" height="467" frameborder="0" allowtransparency="true" marginwidth="0" marginheight="0"></iframe>
'''
st.components.v1.html(iframe_code, height=500)

# Inflation Rates
show_inflation = st.selectbox('Show Inflation Rates', ['UK', 'US'])
if show_inflation == 'US':
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("United States")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"US Inflation Rate: {inflation_data['yearly_rate_pct']}%")
    else:
        st.write("Error fetching inflation data.")
elif show_inflation == 'UK':  # Fixed the comparison operator here
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("United Kingdom")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"UK Inflation Rate: {inflation_data['yearly_rate_pct']}%")  # Fixed the message here
    else:
        st.write("Error fetching inflation data.")




