import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import spacy

nlp = spacy.load("en_core_web_sm")

# Function to scrape news from Yahoo Finance and perform sentiment analysis
def fetch_yahoo_finance_news():
    url = "https://uk.finance.yahoo.com/topic/news"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    headlines = {}

    for item in soup.find_all('h3', {'class': lambda x: x and 'Mb(5px)' in x}):
        text = item.get_text()
        link = item.a['href']
        blob = TextBlob(text)
        sentiment = blob.sentiment.polarity

        if text and link:
            headlines[text] = {
                'link': f"https://finance.yahoo.com{link}",
                'sentiment': sentiment
            }
    return headlines

# Web App Title
st.title("Jamal - Dynamic Market Overview")


headlines = fetch_yahoo_finance_news()
headline_list = list(headlines.keys())


flat_data = []
for headline, details in headlines.items():
    flat_data.append({
        'Headline': headline,
        'Link': details['link'],
        'Sentiment': details['sentiment']
    })

# Convert the flat dictionary to a DataFrame
news_df = pd.DataFrame(flat_data)


st.subheader("Sentiment Analysis Legend")
st.markdown("""
    <style>
        .legend {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        .legend svg {
            margin-right: 5px;
        }
    </style>
    <div class="legend">
        <svg height='20' width='20'><circle cx='10' cy='10' r='8' fill='#00cc66' /></svg>
        Positive Sentiment
    </div>
    <div class="legend">
        <svg height='20' width='20'><circle cx='10' cy='10' r='8' fill='#ff6666' /></svg>
        Negative Sentiment
    </div>
    <div class="legend">
        <svg height='20' width='20'><circle cx='10' cy='10' r='8' fill='#808080' /></svg>
        Neutral Sentiment
    </div>
""", unsafe_allow_html=True)


def summarize_text(text):
    doc = nlp(text)
    sentences = [sentence.orth_ for sentence in doc.sents]
    return ' '.join(sentences[:3])  # Return the first 3 sentences as a summary

# Fetch the complete article text based on the URL (this is a placeholder; you'll need to implement this)
def fetch_article_text(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    paragraphs = soup.find_all('p')
    article_text = ' '.join([para.text for para in paragraphs])
    return article_text

st.markdown("## **Select a headline for summary**")  # Made this text bold and bigger
for headline in headline_list:
    sentiment = headlines[headline]['sentiment']
    if sentiment > 0.2:
        color = '#00cc66'  # A professional shade of green
    elif sentiment < 0:
        color = '#ff6666'  # A shade of red
    else:
        color = '#808080'  # Neutral color (grey)
    
    expander_label = f'<div style="display: flex; align-items: center;"><svg height="20" width="20"><circle cx="10" cy="10" r="8" fill="{color}" /></svg><span style="margin-left: 10px;">{headline}</span></div>'
    with st.expander(expander_label, unsafe_allow_html=True):
        summary_url = headlines[headline]['link']
        full_article_text = fetch_article_text(summary_url)
        summary = summarize_text(full_article_text)
        st.write(f"Summary: {summary}")
        st.write(f"For more details, [click here]({summary_url})")




xapi = 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'

st.subheader('Exchange rate data')

api_url = 'https://api.api-ninjas.com/v1/exchangerate?pair=USD_EUR'
response = requests.get(api_url, headers={'X-Api-Key': xapi})
if response.status_code == requests.codes.ok:
    st.write(response.text)
else:
    print("Error:", response.status_code, response.text)

api_url = 'https://api.api-ninjas.com/v1/exchangerate?pair=USD_JPY'
response = requests.get(api_url, headers={'X-Api-Key': xapi})
if response.status_code == requests.codes.ok:
    st.write(response.text)
else:
    print("Error:", response.status_code, response.text)

api_url = 'https://api.api-ninjas.com/v1/exchangerate?pair=USD_GBP'
response = requests.get(api_url, headers={'X-Api-Key': xapi})
if response.status_code == requests.codes.ok:
    st.write(response.text)
else:
    print("Error:", response.status_code, response.text)

# Inflation Rates
show_inflation = st.selectbox('Show Inflation Rates', ['UK', 'US', 'JP'])
if show_inflation == 'US':
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("United States")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"US Inflation Rate: {inflation_data['yearly_rate_pct']}%")
    else:
        st.write("Error fetching inflation data.")
elif show_inflation == 'UK':  # Fixed the comparison operator here
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("United Kingdom")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"UK Inflation Rate: {inflation_data['yearly_rate_pct']}%")  # Fixed the message here
    else:
        st.write("Error fetching inflation data.")
elif show_inflation == 'JP':  # Fixed the comparison operator here
    api_url = 'https://api.api-ninjas.com/v1/inflation?country={}'.format("Japan")
    response = requests.get(api_url, headers={'X-Api-Key': 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'})
    if response.status_code == requests.codes.ok:
        inflation_data = response.json()[0]
        st.write(f"UK Inflation Rate: {inflation_data['yearly_rate_pct']}%")  # Fixed the message here
    else:
        st.write("Error fetching inflation data.")





def fetch_yield_data(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    
    table = soup.find('table', {'class': 'BasicTable-table'})
    
    maturities = []
    yields = []
    changes = []
    
    for row in table.find_all('tr')[1:]:
        cols = row.find_all('td')
        
        maturity = cols[0].text.strip()
        yield_value = float(cols[1].text.strip())
        change = float(cols[2].text.split()[0].replace('+', '').replace('-', ''))
        
        maturities.append(maturity)
        yields.append(yield_value)
        changes.append(change)
        
    df = pd.DataFrame({
        'Maturity': maturities,
        'Yield': yields,
        'Change': changes
    })
    
    return df

# URLs for different countries' bonds
urls = {
    'US': 'https://www.cnbc.com/us-treasurys/',
    'UK': 'https://www.cnbc.com/uk-government-bonds/'
}

# Fetch yield data
yield_choice = st.selectbox('Select Yield Curve', ['UK', 'US'])
yield_data = fetch_yield_data(urls[yield_choice])

# Interactive Yield Curve Plots
st.subheader("Yield Curve")
yield_curve_choice = st.selectbox('Select Yield Curve', ['UK', 'US'])

if yield_curve_choice == 'UK':
    fig_uk = px.line(uk_yield_data, x='Maturity', y='Rates', title='UK Yield Curve')
    fig_uk.update_traces(line=dict(color='blue'))
    st.plotly_chart(fig_uk)
elif yield_curve_choice == 'US':
    fig_us = px.line(us_yield_data, x='Maturity', y='Rates', title='US Yield Curve')
    fig_us.update_traces(line=dict(color='blue'))
    st.plotly_chart(fig_us)



st.subheader("Economic Calendar")
iframe_code = '''
<iframe src="https://sslecal2.investing.com?columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous&features=datepicker,timezone&countries=25,32,6,37,72,22,17,39,14,10,35,43,56,36,110,11,26,12,4,5&calType=day&timeZone=15&lang=1" width="650" height="467" frameborder="0" allowtransparency="true" marginwidth="0" marginheight="0"></iframe>
'''
st.components.v1.html(iframe_code, height=500)




# ... rest of your code remains unchanged ...

