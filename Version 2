import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from bs4 import BeautifulSoup
import spacy
import nltk
from textblob import TextBlob


nlp = spacy.load("en_core_web_sm")
sia = SentimentIntensityAnalyzer()
# Function to scrape news from Yahoo Finance
def fetch_yahoo_finance_news():
    url = "https://uk.finance.yahoo.com/topic/news"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    headlines = {}

    for item in soup.find_all('h3', {'class': lambda x: x and 'Mb(5px)' in x}):
        text = item.get_text()
        link = item.a['href']

        if text and link:
            headlines[text] = {
                'link': f"https://finance.yahoo.com{link}"
            }
    return headlines

# Web App Title
st.title("Jamal - Dynamic Market Overview")

headlines = fetch_yahoo_finance_news()
headline_list = list(headlines.keys())

def summarize_text(text):
    doc = nlp(text)
    sentences = [sentence.orth_ for sentence in doc.sents]
    return ' '.join(sentences[:3])  # Return the first 3 sentences as a summary

# Fetch the complete article text based on the URL
def fetch_article_text(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    paragraphs = soup.find_all('p')
    article_text = ' '.join([para.text for para in paragraphs])
    return article_text



def get_sentiment(text):
    blob = TextBlob(text)
    sentiment_score = blob.sentiment.polarity
    if sentiment_score > 0.05:
        return 'Positive', '#00cc66'  # green
    elif sentiment_score < -0.05:
        return 'Negative', '#ff6666'  # red
    else:
        return 'Neutral', '#ffffff'  # white

st.markdown("## **Select a headline for summary**")  # Made this text bold and bigger
for headline in headline_list:
    with st.expander(headline):
        summary_url = headlines[headline]['link']
        full_article_text = fetch_article_text(summary_url)
        summary = summarize_text(full_article_text)
        sentiment, color = get_sentiment(full_article_text)
        st.write(f"Summary: {summary}")
        st.markdown(f"Sentiment: <span style='background-color:{color};'>{sentiment}</span>")
        st.write(f"For more details, [click here]({summary_url})")

xapi = 'P3jnaeiRz/shEPn4iOKD6A==aaPYULKIx9Xi7xNS'

def fetch_exchange_rate(pair):
    api_url = f'https://api.api-ninjas.com/v1/exchangerate?pair={pair}'
    response = requests.get(api_url, headers={'X-Api-Key': xapi})
    if response.status_code == requests.codes.ok:
        return response.json()['rate']
    else:
        print("Error:", response.status_code, response.text)
        return None

def fetch_inflation_rate(country):
    api_url = f'https://api.api-ninjas.com/v1/inflation?country={country}'
    response = requests.get(api_url, headers={'X-Api-Key': xapi})
    if response.status_code == requests.codes.ok:
        return response.json()[0]['yearly_rate_pct']
    else:
        print("Error:", response.status_code, response.text)
        return None

# Fetching exchange rate data
exchange_rate_data = {
    'Currency Pair': ['USD_EUR', 'USD_JPY', 'USD_GBP'],
    'Exchange Rate': [fetch_exchange_rate(pair) for pair in ['USD_EUR', 'USD_JPY', 'USD_GBP']]
}

exchange_rate_df = pd.DataFrame(exchange_rate_data)
st.subheader('Exchange Rate Data')
st.table(exchange_rate_df)

# Fetching inflation rate data
inflation_rate_data = {
    'Country': ['US', 'UK', 'JP'],
    'Inflation Rate': [fetch_inflation_rate(country) for country in ["United States", "United Kingdom", "Japan"]]
}

inflation_rate_df = pd.DataFrame(inflation_rate_data)
st.subheader('Inflation Rate Data')
st.table(inflation_rate_df)



def fetch_yield_data(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    
    table = soup.find('table', {'class': 'BasicTable-table'})
    
    maturities = []
    yields = []
    changes = []
    
    for row in table.find_all('tr')[1:]:
        cols = row.find_all('td')
        
        maturity = cols[0].text.strip()
        yield_value = float(cols[1].text.strip())
        change = float(cols[2].text.split()[0].replace('+', '').replace('-', ''))
        
        maturities.append(maturity)
        yields.append(yield_value)
        changes.append(change)
        
    df = pd.DataFrame({
        'Maturity': maturities,
        'Yield': yields,
        'Change': changes
    })
    
    return df

# URLs for different countries' bonds
urls = {
    'US': 'https://www.cnbc.com/us-treasurys/',
    'UK': 'https://www.cnbc.com/uk-government-bonds/'
}

# Fetch yield data
yield_choice = st.selectbox('Select Yield Curve', ['UK', 'US'])
yield_data = fetch_yield_data(urls[yield_choice])

# Interactive Yield Curve Plots
st.subheader("Yield Curve")
yield_curve_choice = st.selectbox('Select Yield Curve', ['UK', 'US'])

if yield_curve_choice == 'UK':
    fig_uk = px.line(uk_yield_data, x='Maturity', y='Rates', title='UK Yield Curve')
    fig_uk.update_traces(line=dict(color='blue'))
    st.plotly_chart(fig_uk)
elif yield_curve_choice == 'US':
    fig_us = px.line(us_yield_data, x='Maturity', y='Rates', title='US Yield Curve')
    fig_us.update_traces(line=dict(color='blue'))
    st.plotly_chart(fig_us)



st.subheader("Economic Calendar")
iframe_code = '''
<iframe src="https://sslecal2.investing.com?columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous&features=datepicker,timezone&countries=25,32,6,37,72,22,17,39,14,10,35,43,56,36,110,11,26,12,4,5&calType=day&timeZone=15&lang=1" width="650" height="467" frameborder="0" allowtransparency="true" marginwidth="0" marginheight="0"></iframe>
'''
st.components.v1.html(iframe_code, height=500)




# ... rest of your code remains unchanged ...
